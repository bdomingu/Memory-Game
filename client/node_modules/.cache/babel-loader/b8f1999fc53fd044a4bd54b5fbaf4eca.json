{"ast":null,"code":"import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar UnMemoizedMessageOptions = function (props) {\n  var _a = props.ActionsIcon,\n      ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a,\n      _b = props.displayReplies,\n      displayReplies = _b === void 0 ? true : _b,\n      propHandleOpenThread = props.handleOpenThread,\n      messageWrapperRef = props.messageWrapperRef,\n      _c = props.ReactionIcon,\n      ReactionIcon = _c === void 0 ? DefaultReactionIcon : _c,\n      _d = props.theme,\n      theme = _d === void 0 ? 'simple' : _d,\n      _e = props.ThreadIcon,\n      ThreadIcon = _e === void 0 ? DefaultThreadIcon : _e;\n\n  var _f = useMessageContext('MessageOptions'),\n      customMessageActions = _f.customMessageActions,\n      getMessageActions = _f.getMessageActions,\n      contextHandleOpenThread = _f.handleOpenThread,\n      initialMessage = _f.initialMessage,\n      message = _f.message,\n      onReactionListClick = _f.onReactionListClick,\n      threadList = _f.threadList;\n\n  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n\n  var rootClassName = \"str-chat__message-\".concat(theme, \"__actions str-chat__message-options\");\n  return React.createElement(\"div\", {\n    className: rootClassName,\n    \"data-testid\": 'message-options'\n  }, showActionsBox && React.createElement(MessageActions, {\n    ActionsIcon: ActionsIcon,\n    messageWrapperRef: messageWrapperRef\n  }), shouldShowReplies && React.createElement(\"button\", {\n    \"aria-label\": 'Open Thread',\n    className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--thread str-chat__message-reply-in-thread-button\"),\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, {\n    className: 'str-chat__message-action-icon'\n  })), shouldShowReactions && React.createElement(\"button\", {\n    \"aria-label\": 'Open Reaction Selector',\n    className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--reactions str-chat__message-reactions-button\"),\n    \"data-testid\": 'message-reaction-action',\n    onClick: onReactionListClick\n  }, React.createElement(ReactionIcon, {\n    className: 'str-chat__message-action-icon'\n  })));\n};\n\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);","map":{"version":3,"names":["React","ActionsIcon","DefaultActionsIcon","ReactionIcon","DefaultReactionIcon","ThreadIcon","DefaultThreadIcon","MESSAGE_ACTIONS","showMessageActionsBox","MessageActions","useMessageContext","UnMemoizedMessageOptions","props","_a","_b","displayReplies","propHandleOpenThread","handleOpenThread","messageWrapperRef","_c","_d","theme","_e","_f","customMessageActions","getMessageActions","contextHandleOpenThread","initialMessage","message","onReactionListClick","threadList","messageActions","showActionsBox","shouldShowReactions","indexOf","react","shouldShowReplies","reply","type","status","rootClassName","concat","createElement","className","onClick","MessageOptions","memo"],"sources":["/home/betty/web-app-practice/memory-game/client/node_modules/stream-chat-react/dist/components/Message/MessageOptions.js"],"sourcesContent":["import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon, } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedMessageOptions = function (props) {\n    var _a = props.ActionsIcon, ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a, _b = props.displayReplies, displayReplies = _b === void 0 ? true : _b, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _c = props.ReactionIcon, ReactionIcon = _c === void 0 ? DefaultReactionIcon : _c, _d = props.theme, theme = _d === void 0 ? 'simple' : _d, _e = props.ThreadIcon, ThreadIcon = _e === void 0 ? DefaultThreadIcon : _e;\n    var _f = useMessageContext('MessageOptions'), customMessageActions = _f.customMessageActions, getMessageActions = _f.getMessageActions, contextHandleOpenThread = _f.handleOpenThread, initialMessage = _f.initialMessage, message = _f.message, onReactionListClick = _f.onReactionListClick, threadList = _f.threadList;\n    var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n    var messageActions = getMessageActions();\n    var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;\n    var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n    var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n    if (!message.type ||\n        message.type === 'error' ||\n        message.type === 'system' ||\n        message.type === 'ephemeral' ||\n        message.status === 'failed' ||\n        message.status === 'sending' ||\n        initialMessage) {\n        return null;\n    }\n    var rootClassName = \"str-chat__message-\".concat(theme, \"__actions str-chat__message-options\");\n    return (React.createElement(\"div\", { className: rootClassName, \"data-testid\": 'message-options' },\n        showActionsBox && (React.createElement(MessageActions, { ActionsIcon: ActionsIcon, messageWrapperRef: messageWrapperRef })),\n        shouldShowReplies && (React.createElement(\"button\", { \"aria-label\": 'Open Thread', className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--thread str-chat__message-reply-in-thread-button\"), \"data-testid\": 'thread-action', onClick: handleOpenThread },\n            React.createElement(ThreadIcon, { className: 'str-chat__message-action-icon' }))),\n        shouldShowReactions && (React.createElement(\"button\", { \"aria-label\": 'Open Reaction Selector', className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--reactions str-chat__message-reactions-button\"), \"data-testid\": 'message-reaction-action', onClick: onReactionListClick },\n            React.createElement(ReactionIcon, { className: 'str-chat__message-action-icon' })))));\n};\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}