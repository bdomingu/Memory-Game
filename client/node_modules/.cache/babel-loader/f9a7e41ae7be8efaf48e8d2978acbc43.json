{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\n\nvar UnMemoizedScrollToBottomButton = function (props) {\n  var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom,\n      onClick = props.onClick,\n      threadList = props.threadList;\n\n  var _a = useChatContext(),\n      activeChannel = _a.channel,\n      client = _a.client;\n\n  var thread = useChannelStateContext().thread;\n\n  var _b = useState((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0),\n      countUnread = _b[0],\n      setCountUnread = _b[1];\n\n  var _c = useState((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0),\n      replyCount = _c[0],\n      setReplyCount = _c[1];\n\n  var observedEvent = threadList ? 'message.updated' : 'message.new';\n  useEffect(function () {\n    var handleEvent = function (event) {\n      var _a, _b, _c, _d, _e;\n\n      var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);\n      var newMessageIsMine = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);\n      var isThreadOpen = !!thread;\n      var newMessageIsReply = !!((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id);\n      var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n\n      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {\n        return;\n      }\n\n      if (event.type === 'message.new') {\n        // cannot rely on channel.countUnread because active channel is automatically marked read\n        setCountUnread(function (prev) {\n          return prev + 1;\n        });\n      } else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {\n        var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;\n        setCountUnread(function () {\n          return newReplyCount_1 - replyCount;\n        });\n      }\n    };\n\n    client.on(observedEvent, handleEvent);\n    return function () {\n      client.off(observedEvent, handleEvent);\n    };\n  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n  useEffect(function () {\n    if (isMessageListScrolledToBottom) {\n      setCountUnread(0);\n      setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);\n    }\n  }, [isMessageListScrolledToBottom, thread]);\n  if (isMessageListScrolledToBottom) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__jump-to-latest-message'\n  }, React.createElement(\"button\", {\n    \"aria-live\": 'polite',\n    className: \"\\n        str-chat__message-notification-right\\n        str-chat__message-notification-scroll-to-latest\\n        str-chat__circle-fab\\n      \",\n    \"data-testid\": 'message-notification',\n    onClick: onClick\n  }, React.createElement(ArrowDown, null), countUnread > 0 && React.createElement(\"div\", {\n    className: clsx('str-chat__message-notification', 'str-chat__message-notification-scroll-to-latest-unread-count', 'str-chat__jump-to-latest-unread-count'),\n    \"data-testid\": 'unread-message-notification-counter'\n  }, countUnread)));\n};\n\nexport var ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);","map":{"version":3,"names":["React","useEffect","useState","clsx","ArrowDown","useChannelStateContext","useChatContext","UnMemoizedScrollToBottomButton","props","isMessageListScrolledToBottom","onClick","threadList","_a","activeChannel","channel","client","thread","_b","countUnread","setCountUnread","_c","reply_count","replyCount","setReplyCount","observedEvent","handleEvent","event","_d","_e","newMessageInAnotherChannel","cid","newMessageIsMine","user","id","isThreadOpen","newMessageIsReply","message","parent_id","dontIncreaseMainListCounterOnNewReply","type","prev","newReplyCount_1","on","off","createElement","className","ScrollToBottomButton","memo"],"sources":["/home/betty/web-app-practice/memory-game/client/node_modules/stream-chat-react/dist/components/MessageList/ScrollToBottomButton.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\nvar UnMemoizedScrollToBottomButton = function (props) {\n    var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom, onClick = props.onClick, threadList = props.threadList;\n    var _a = useChatContext(), activeChannel = _a.channel, client = _a.client;\n    var thread = useChannelStateContext().thread;\n    var _b = useState((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0), countUnread = _b[0], setCountUnread = _b[1];\n    var _c = useState((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0), replyCount = _c[0], setReplyCount = _c[1];\n    var observedEvent = threadList ? 'message.updated' : 'message.new';\n    useEffect(function () {\n        var handleEvent = function (event) {\n            var _a, _b, _c, _d, _e;\n            var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);\n            var newMessageIsMine = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);\n            var isThreadOpen = !!thread;\n            var newMessageIsReply = !!((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id);\n            var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n            if (isMessageListScrolledToBottom ||\n                newMessageInAnotherChannel ||\n                newMessageIsMine ||\n                dontIncreaseMainListCounterOnNewReply) {\n                return;\n            }\n            if (event.type === 'message.new') {\n                // cannot rely on channel.countUnread because active channel is automatically marked read\n                setCountUnread(function (prev) { return prev + 1; });\n            }\n            else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {\n                var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;\n                setCountUnread(function () { return newReplyCount_1 - replyCount; });\n            }\n        };\n        client.on(observedEvent, handleEvent);\n        return function () {\n            client.off(observedEvent, handleEvent);\n        };\n    }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n    useEffect(function () {\n        if (isMessageListScrolledToBottom) {\n            setCountUnread(0);\n            setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);\n        }\n    }, [isMessageListScrolledToBottom, thread]);\n    if (isMessageListScrolledToBottom)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__jump-to-latest-message' },\n        React.createElement(\"button\", { \"aria-live\": 'polite', className: \"\\n        str-chat__message-notification-right\\n        str-chat__message-notification-scroll-to-latest\\n        str-chat__circle-fab\\n      \", \"data-testid\": 'message-notification', onClick: onClick },\n            React.createElement(ArrowDown, null),\n            countUnread > 0 && (React.createElement(\"div\", { className: clsx('str-chat__message-notification', 'str-chat__message-notification-scroll-to-latest-unread-count', 'str-chat__jump-to-latest-unread-count'), \"data-testid\": 'unread-message-notification-counter' }, countUnread)))));\n};\nexport var ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}