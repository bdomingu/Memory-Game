{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {\n  if (lockChannelOrder === void 0) {\n    lockChannelOrder = false;\n  }\n\n  if (allowNewMessagesFromUnfilteredChannels === void 0) {\n    allowNewMessagesFromUnfilteredChannels = true;\n  }\n\n  var client = useChatContext('useMessageNewListener').client;\n  useEffect(function () {\n    var handleEvent = function (event) {\n      setChannels(function (channels) {\n        var channelInList = channels.filter(function (channel) {\n          return channel.cid === event.cid;\n        }).length > 0;\n\n        if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n          var channel = client.channel(event.channel_type, event.channel_id);\n          return uniqBy(__spreadArray([channel], channels, true), 'cid');\n        }\n\n        if (!lockChannelOrder) return moveChannelUp({\n          channels: channels,\n          cid: event.cid || ''\n        });\n        return channels;\n      });\n    };\n\n    client.on('message.new', handleEvent);\n    return function () {\n      client.off('message.new', handleEvent);\n    };\n  }, [lockChannelOrder]);\n};","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","useEffect","uniqBy","moveChannelUp","useChatContext","useMessageNewListener","setChannels","lockChannelOrder","allowNewMessagesFromUnfilteredChannels","client","handleEvent","event","channels","channelInList","filter","channel","cid","channel_type","channel_id","on","off"],"sources":["/home/betty/web-app-practice/memory-game/client/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js"],"sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {\n    if (lockChannelOrder === void 0) { lockChannelOrder = false; }\n    if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }\n    var client = useChatContext('useMessageNewListener').client;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            setChannels(function (channels) {\n                var channelInList = channels.filter(function (channel) { return channel.cid === event.cid; }).length > 0;\n                if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n                    var channel = client.channel(event.channel_type, event.channel_id);\n                    return uniqBy(__spreadArray([channel], channels, true), 'cid');\n                }\n                if (!lockChannelOrder)\n                    return moveChannelUp({ channels: channels, cid: event.cid || '' });\n                return channels;\n            });\n        };\n        client.on('message.new', handleEvent);\n        return function () {\n            client.off('message.new', handleEvent);\n        };\n    }, [lockChannelOrder]);\n};\n"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoBC,IAApB,EAA0B;EAC1E,IAAIA,IAAI,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAjC,EAAoC,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,IAAI,CAACG,MAApB,EAA4BG,EAAjC,EAAqCF,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;IACjF,IAAIE,EAAE,IAAI,EAAEF,CAAC,IAAIJ,IAAP,CAAV,EAAwB;MACpB,IAAI,CAACM,EAAL,EAASA,EAAE,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,IAA3B,EAAiC,CAAjC,EAAoCI,CAApC,CAAL;MACTE,EAAE,CAACF,CAAD,CAAF,GAAQJ,IAAI,CAACI,CAAD,CAAZ;IACH;EACJ;EACD,OAAOL,EAAE,CAACY,MAAH,CAAUL,EAAE,IAAIC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,IAA3B,CAAhB,CAAP;AACH,CARD;;AASA,SAASY,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAO,IAAIC,qBAAqB,GAAG,UAAUC,WAAV,EAAuBC,gBAAvB,EAAyCC,sCAAzC,EAAiF;EAChH,IAAID,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;IAAEA,gBAAgB,GAAG,KAAnB;EAA2B;;EAC9D,IAAIC,sCAAsC,KAAK,KAAK,CAApD,EAAuD;IAAEA,sCAAsC,GAAG,IAAzC;EAAgD;;EACzG,IAAIC,MAAM,GAAGL,cAAc,CAAC,uBAAD,CAAd,CAAwCK,MAArD;EACAR,SAAS,CAAC,YAAY;IAClB,IAAIS,WAAW,GAAG,UAAUC,KAAV,EAAiB;MAC/BL,WAAW,CAAC,UAAUM,QAAV,EAAoB;QAC5B,IAAIC,aAAa,GAAGD,QAAQ,CAACE,MAAT,CAAgB,UAAUC,OAAV,EAAmB;UAAE,OAAOA,OAAO,CAACC,GAAR,KAAgBL,KAAK,CAACK,GAA7B;QAAmC,CAAxE,EAA0ExB,MAA1E,GAAmF,CAAvG;;QACA,IAAI,CAACqB,aAAD,IAAkBL,sCAAlB,IAA4DG,KAAK,CAACM,YAAtE,EAAoF;UAChF,IAAIF,OAAO,GAAGN,MAAM,CAACM,OAAP,CAAeJ,KAAK,CAACM,YAArB,EAAmCN,KAAK,CAACO,UAAzC,CAAd;UACA,OAAOhB,MAAM,CAACf,aAAa,CAAC,CAAC4B,OAAD,CAAD,EAAYH,QAAZ,EAAsB,IAAtB,CAAd,EAA2C,KAA3C,CAAb;QACH;;QACD,IAAI,CAACL,gBAAL,EACI,OAAOJ,aAAa,CAAC;UAAES,QAAQ,EAAEA,QAAZ;UAAsBI,GAAG,EAAEL,KAAK,CAACK,GAAN,IAAa;QAAxC,CAAD,CAApB;QACJ,OAAOJ,QAAP;MACH,CATU,CAAX;IAUH,CAXD;;IAYAH,MAAM,CAACU,EAAP,CAAU,aAAV,EAAyBT,WAAzB;IACA,OAAO,YAAY;MACfD,MAAM,CAACW,GAAP,CAAW,aAAX,EAA0BV,WAA1B;IACH,CAFD;EAGH,CAjBQ,EAiBN,CAACH,gBAAD,CAjBM,CAAT;AAkBH,CAtBM"},"metadata":{},"sourceType":"module"}